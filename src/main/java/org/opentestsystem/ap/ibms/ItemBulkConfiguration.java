/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ibms;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateEventConsumer;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateEventProducer;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateFactory;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateFileManager;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateItemManager;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateUtility;
import org.opentestsystem.ap.common.bulkupdate.processor.ItemBulkUpdateProcessorAsl;
import org.opentestsystem.ap.common.bulkupdate.processor.ItemBulkUpdateProcessorBraille;
import org.opentestsystem.ap.common.bulkupdate.processor.ItemBulkUpdateProcessorGlossary;
import org.opentestsystem.ap.common.bulkupdate.processor.ItemBulkUpdateResponseProcessor;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminProcessor;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminUtil;
import org.opentestsystem.ap.common.client.PermissionServiceClient;
import org.opentestsystem.ap.common.config.BrokerConfig;
import org.opentestsystem.ap.common.config.BrokerConfigurationHelper;
import org.opentestsystem.ap.common.config.ContentNegotiationConfig;
import org.opentestsystem.ap.common.config.DatabaseConfiguration;
import org.opentestsystem.ap.common.config.FreemarkerConfig;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.config.ItemManagerProducerConfiguration;
import org.opentestsystem.ap.common.config.RedisSessionConfig;
import org.opentestsystem.ap.common.config.SecurityConfig;
import org.opentestsystem.ap.common.config.SessionConfig;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.S3BucketManager;
import org.opentestsystem.ap.common.datastore.repository.ItemBulkUpdateEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.model.ModelObjectMapper;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Primary;
import org.springframework.retry.interceptor.RetryOperationsInterceptor;

import javax.annotation.PostConstruct;

@Slf4j
@Configuration
@Import({
    StatusConfiguration.class,
    ContentNegotiationConfig.class,
    DatabaseConfiguration.class,
    BrokerConfig.class,
    FreemarkerConfig.class,
    ItemManagerProducerConfiguration.class,
    RedisSessionConfig.class,
    SecurityConfig.class,
    SessionConfig.class
})
@EnableConfigurationProperties({ItemBankProperties.class, TaskProperties.class})
public class ItemBulkConfiguration {

    private final ItemBankProperties itemBankProperties;

    private final RestTemplateBuilder restTemplateBuilder;

    private final ConnectionFactory connectionFactory;

    private final RabbitTemplate rabbitTemplate;

    private final BrokerConfigurationHelper brokerConfigurationHelper;

    private final freemarker.template.Configuration freemarker;

    private final ItemBulkUpdateEntityRepository itemBulkUpdateEntityRepository;

    private final ItemEntityRepository itemEntityRepository;

    private final S3BucketManager s3BucketManager;

    private final DataStoreDataManager dataStoreDataManager;

    private final DataStoreAttachmentManager dataStoreAttachmentManager;

    private final DataStoreUtility dataStoreUtility;

    private final RetryOperationsInterceptor retryOperations;

    public ItemBulkConfiguration(ItemBankProperties itemBankProperties,
                                 RestTemplateBuilder restTemplateBuilder,
                                 ConnectionFactory connectionFactory,
                                 RabbitTemplate rabbitTemplate,
                                 RabbitAdmin rabbitAdmin,
                                 freemarker.template.Configuration freemarker,
                                 ItemEntityRepository itemEntityRepository,
                                 ItemBulkUpdateEntityRepository itemBulkUpdateEntityRepository,
                                 S3BucketManager s3BucketManager,
                                 DataStoreDataManager dataStoreDataManager,
                                 DataStoreAttachmentManager dataStoreAttachmentManager,
                                 DataStoreUtility dataStoreUtility) {
        this.itemBankProperties = itemBankProperties;
        this.restTemplateBuilder = restTemplateBuilder;
        this.connectionFactory = connectionFactory;
        this.rabbitTemplate = rabbitTemplate;
        this.freemarker = freemarker;
        this.itemEntityRepository = itemEntityRepository;
        this.itemBulkUpdateEntityRepository = itemBulkUpdateEntityRepository;
        this.s3BucketManager = s3BucketManager;
        this.dataStoreDataManager = dataStoreDataManager;
        this.dataStoreAttachmentManager = dataStoreAttachmentManager;

        this.brokerConfigurationHelper = new BrokerConfigurationHelper(
            this.rabbitTemplate, rabbitAdmin, this.itemBankProperties.getItemBulkUpdate().getEvents());
        this.dataStoreUtility = dataStoreUtility;

        this.retryOperations = this.brokerConfigurationHelper.buildRetryOperations();
    }

    @PostConstruct
    protected void init() {
        this.brokerConfigurationHelper.configure();
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public AttachmentValidator attachmentValidator() {
        log.info("Creating bean attachmentValidator");
        return new AttachmentValidator(this.itemBankProperties);
    }


    @Bean
    @ConditionalOnMissingBean
    public TestAdminUtil testAdminUtil() {
        log.info("Creating bean testAdminUtil");
        return new TestAdminUtil();
    }

    @Bean
    @ConditionalOnMissingBean
    public TestAdminProcessor testAdminProcessor() {
        log.info("Creating bean testAdminProcessor");
        return new TestAdminProcessor(
            this.itemBankProperties,
            this.dataStoreDataManager,
            itemManagerEventProducer(),
            this.dataStoreUtility,
            testAdminUtil());
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventProducer itemManagerEventProducer() {
        log.info("Creating bean itemManagerEventProducer");
        return new ItemManagerEventProducer(this.itemBankProperties, this.rabbitTemplate);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreItemManager dataStoreItemManager() {
        log.info("Creating bean dataStoreItemManager");
        return new DataStoreItemManager(
            this.itemBankProperties,
            this.dataStoreDataManager,
            this.dataStoreAttachmentManager,
            itemManagerEventProducer(),
            this.dataStoreUtility);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemBulkUpdateItemManager itemBulkUpdateItemManager() {
        log.info("Creating bean itemBulkUpdateItemManager");
        return new ItemBulkUpdateItemManager(
            this.itemBankProperties,
            this.itemEntityRepository,
            this.dataStoreDataManager,
            dataStoreItemManager(),
            this.dataStoreAttachmentManager,
            itemManagerEventProducer(),
            this.dataStoreUtility,
            permissionServiceClient()
            );
    }

    // ------------------------------------------------------------------------

    @Bean
    @Primary
    public ItemBulkUpdateEventProducer itemBulkUpdateEventProducer() {
        log.info("Creating bean itemBulkUpdateEventProducer");
        return new ItemBulkUpdateEventProducer(this.itemBankProperties, this.rabbitTemplate);
    }

    @Bean
    @Qualifier("itemBulkUpdateResponseProducer")
    public ItemBulkUpdateEventProducer itemBulkUpdateResponseProducer() {
        log.info("Creating bean itemBulkUpdateResponseProducer");
        RabbitTemplate rabbitResponseTemplate = new RabbitTemplate(this.connectionFactory);
        rabbitResponseTemplate.setChannelTransacted(false);
        rabbitResponseTemplate.setMessageConverter(this.newJsonMessageConverter());
        return new ItemBulkUpdateEventProducer(this.itemBankProperties, rabbitResponseTemplate);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemBulkUpdateEventConsumer itemBulkUpdateEventConsumer() {
        log.info("Creating bean itemBulkUpdateEventConsumer");
        return new ItemBulkUpdateEventConsumer(
            itemBulkUpdateFactory(),
            itemBulkUpdateEntityRepository,
            itemBulkUpdateResponseProcessor(),
            itemBulkUpdateUtility());
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemBulkUpdateFileManager itemBulkUpdateFileManager() {
        log.info("Creating bean itemBulkUpdateFileManager");
        return new ItemBulkUpdateFileManager(
            this.itemBankProperties,
            this.s3BucketManager,
            this.dataStoreAttachmentManager);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemBulkUpdateUtility itemBulkUpdateUtility() {
        log.info("Creating bean itemBulkUpdateUtility");
        return new ItemBulkUpdateUtility();
    }

    @Bean
    @Qualifier("itemBulkUpdateRequestRabbitListenerContainerFactory")
    public SimpleRabbitListenerContainerFactory itemBulkUpdateRequestRabbitListenerContainerFactory() {
        log.info("Creating bean itemBulkUpdateRequestRabbitListenerContainerFactory");
        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
        factory.setConnectionFactory(this.connectionFactory);
        factory.setMessageConverter(this.newJsonMessageConverter());
        factory.setDefaultRequeueRejected(false);
        return factory;
    }

    @Bean
    @Qualifier("itemBulkUpdateResponseRabbitListenerContainerFactory")
    public SimpleRabbitListenerContainerFactory itemBulkUpdateResponseRabbitListenerContainerFactory() {
        log.info("Creating bean itemBulkUpdateResponseRabbitListenerContainerFactory");
        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
        factory.setConnectionFactory(this.connectionFactory);
        factory.setMessageConverter(this.newJsonMessageConverter());
        factory.setAdviceChain(this.retryOperations);
        return factory;
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemBulkUpdateResponseProcessor itemBulkUpdateResponseProcessor() {
        log.info("Creating bean itemBulkUpdateResponseProcessor");
        return new ItemBulkUpdateResponseProcessor(this.itemBankProperties, this.itemBulkUpdateEntityRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemBulkUpdateProcessorAsl itemBulkUpdateProcessorAsl() {
        log.info("Creating bean itemBulkUpdateProcessorAsl");
        return new ItemBulkUpdateProcessorAsl(
            this.itemBankProperties,
            itemBulkUpdateFileManager(),
            itemBulkUpdateUtility(),
            itemBulkUpdateResponseProducer(),
            attachmentValidator(),
            itemBulkUpdateItemManager(),
            permissionServiceClient());
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemBulkUpdateProcessorBraille itemBulkUpdateProcessorBraille() {
        log.info("Creating bean itemBulkUpdateProcessorBraille");
        return new ItemBulkUpdateProcessorBraille(
            this.itemBankProperties,
            itemBulkUpdateFileManager(),
            itemBulkUpdateUtility(),
            itemBulkUpdateResponseProducer(),
            attachmentValidator(),
            itemBulkUpdateItemManager(),
            permissionServiceClient());
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemBulkUpdateProcessorGlossary itemBulkUpdateProcessorGlossary() {
        log.info("Creating bean itemBulkUpdateProcessorGlossary");
        return new ItemBulkUpdateProcessorGlossary(
            this.itemBankProperties,
            itemBulkUpdateFileManager(),
            itemBulkUpdateUtility(),
            itemBulkUpdateResponseProducer(),
            attachmentValidator(),
            itemBulkUpdateItemManager(),
            permissionServiceClient());
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemBulkUpdateFactory itemBulkUpdateFactory() {
        log.info("Creating bean itemBulkUpdateFactory");
        return new ItemBulkUpdateFactory(itemBulkUpdateProcessorAsl(),
            itemBulkUpdateProcessorBraille(),
            itemBulkUpdateProcessorGlossary());
    }

    @Bean
    @ConditionalOnMissingBean
    public PermissionServiceClient permissionServiceClient() {
        log.info("Creating bean permissionServiceClient");
        return new PermissionServiceClient(this.restTemplateBuilder,
            this.itemBankProperties.getServices().getPermission());
    }

    // ------------------------------------------------------------------------

    private Jackson2JsonMessageConverter newJsonMessageConverter() {
        Jackson2JsonMessageConverter messageConverter = new Jackson2JsonMessageConverter();
        messageConverter.setJsonObjectMapper(new ModelObjectMapper());
        return messageConverter;
    }
}
