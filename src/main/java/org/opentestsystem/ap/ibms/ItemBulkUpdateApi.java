/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ibms;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateCheckedException;
import org.opentestsystem.ap.common.bulkupdate.model.ItemBulkUpdate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * API for managing item bulk updates.
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/items/bulk")
public class ItemBulkUpdateApi {

    @Autowired
    private ItemBulkUpdateService svc;

    @GetMapping("/{updateType}")
    public ItemBulkUpdateResponse getUserUpdates(@PathVariable String updateType) {
        log.debug("GET getUserUpdate by type {}", updateType);
        return new ItemBulkUpdateResponse(updateType, svc.findUserUpdates(updateType));
    }

    @GetMapping("/id/{updateId}")
    public ItemBulkUpdate getByUpdateId(@PathVariable String updateId) {
        log.debug("GET getUserUpdate by type {}", updateId);
        return svc.findLatest(updateId);
    }

    @PostMapping("/{updateType}")
    public ItemBulkUpdate processUpdateRequest(@ModelAttribute ItemBulkUpdateRequest request) {
        log.debug("Received item bulk update POST request");
        return svc.processUpdateRequest(request);
    }

    @PutMapping("/assignments")
    public ItemBulkAssignmentResponse addItemAssignees(@RequestBody ItemBulkAssignmentRequest request)
        throws ItemBulkUpdateCheckedException {
        log.debug("Received bulk item assignment request");
        return svc.addItemAssignees(request);
    }

    @DeleteMapping("/assignments")
    public ItemBulkAssignmentResponse removeItemAssignees(@RequestBody ItemBulkAssignmentRequest request)
        throws ItemBulkUpdateCheckedException {
        log.debug("Received bulk item unassignment request");
        return svc.removeItemAssignees(request);
    }

    @DeleteMapping("/assignments/all")
    public ItemBulkAssignmentResponse removeAllItemAssignees(@RequestBody ItemBulkAssignmentRequest request)
        throws ItemBulkUpdateCheckedException {
        log.debug("Received bulk item unassign all request");
        return svc.removeAllItemAssignees(request);
    }

    @PatchMapping("/workflow/status")
    public ItemBulkResponse updateItemWorkflowStatus(@RequestBody ItemBulkWorkflowStatusRequest request) {
        log.debug("Received bulk item workflow status update request");
        return svc.updateItemWorkflowStatus(request);
    }

    @PatchMapping("/accessibility/{section}")
    public ItemBulkResponse updateItemAccessibility(@PathVariable String section,
                                                    @RequestBody ItemBulkAccessibilityRequest request) {
        log.debug("Received bulk item accessibility update request");
        request.setSection(section);
        return svc.updateItemAccessibility(request);
    }

    @PatchMapping("/association")
    public ItemBulkResponse updateItemAssociation(@RequestBody ItemBulkAssociationRequest request) {
        log.debug("Received bulk item workflow status update request");
        return svc.updateItemAssociation(request);
    }
}
