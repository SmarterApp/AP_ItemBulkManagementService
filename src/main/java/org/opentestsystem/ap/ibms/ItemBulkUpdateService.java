package org.opentestsystem.ap.ibms;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.ListUtils;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateCheckedException;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateEventProducer;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateFactory;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateFileManager;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateItemManager;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateUtility;
import org.opentestsystem.ap.common.bulkupdate.model.ItemBulkUpdate;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.entity.ItemBulkUpdateEntity;
import org.opentestsystem.ap.common.datastore.repository.ItemBulkUpdateEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.SequenceRepository;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.common.security.SecurityUtil;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.sql.Date;
import java.time.Instant;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import static org.apache.commons.collections4.CollectionUtils.isEmpty;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateConstants.IBU_STATUS_PENDING;
import static org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateConstants.IBU_STATUS_RECEIVED;
import static org.opentestsystem.ap.common.model.ItemConstants.Section.SECTION_METADATA;

@Slf4j
@Service
public class ItemBulkUpdateService {

    private static final ItemBulkResponse SUCCESS = new ItemBulkResponse("SUCCESS");

    private static final String PROPERTY_TYPE_BOOLEAN = "boolean";

    private static final String ASSOCIATION_TYPE_TUTORIAL = "tutorial";

    private final ItemBankProperties itemBankProperties;

    private final SequenceRepository seqMgr;

    private final SecurityUtil securityUtil;

    private final ItemBulkUpdateEntityRepository entityMgr;

    private final ItemBulkUpdateFactory factory;

    private final ItemBulkUpdateFileManager fileMgr;

    private final ItemBulkUpdateItemManager itemManager;

    private final ItemBulkUpdateUtility utility;

    private final ItemBulkUpdateEventProducer eventProducer;

    public ItemBulkUpdateService(ItemBankProperties itemBankProperties,
                                 SequenceRepository seqMgr,
                                 SecurityUtil securityUtil,
                                 ItemBulkUpdateEntityRepository entityMgr,
                                 ItemBulkUpdateFactory factory,
                                 ItemBulkUpdateFileManager fileMgr,
                                 ItemBulkUpdateItemManager itemManager,
                                 ItemBulkUpdateUtility utility,
                                 ItemBulkUpdateEventProducer eventProducer) {
        this.itemBankProperties = itemBankProperties;
        this.seqMgr = seqMgr;
        this.securityUtil = securityUtil;
        this.entityMgr = entityMgr;
        this.factory = factory;
        this.fileMgr = fileMgr;
        this.itemManager = itemManager;
        this.utility = utility;
        this.eventProducer = eventProducer;
    }

    @Transactional
    public ItemBulkUpdate processUpdateRequest(ItemBulkUpdateRequest request) {
        log.info("processing bulk update request");

        ItemBulkUpdate ibu = this.processReceived(request, securityUtil.getUsername());

        log.info("the request contains file {}", ibu.getUploadFileName());
        this.fileMgr.uploadItemBulkUpdateFile(ibu.getUpdateId(), request.getFile());

        ItemBulkUpdate ibuClone = this.processPending(ibu);

        return ibuClone;
    }

    @Transactional
    public ItemBulkResponse addItemAssignees(ItemBulkAssignmentRequest request)
        throws ItemBulkUpdateCheckedException {
        log.info("processing bulk assignment request");

        validateBulkAssignmentRequest(request);

        this.itemManager.addAssignees(securityUtil.getItemBankUser(), request.getItemIds(), request.getUserNames());

        return SUCCESS;
    }

    @Transactional
    public ItemBulkResponse removeItemAssignees(ItemBulkAssignmentRequest request)
        throws ItemBulkUpdateCheckedException {
        log.info("processing bulk unassignment request");

        validateBulkAssignmentRequest(request);

        this.itemManager.removeAssignees(securityUtil.getItemBankUser(), request.getItemIds(), request.getUserNames());

        return SUCCESS;
    }

    @Transactional
    public ItemBulkResponse removeAllItemAssignees(ItemBulkAssignmentRequest request)
        throws ItemBulkUpdateCheckedException {
        log.info("processing bulk unassignment request");

        validateBulkRemovalRequest(request);

        this.itemManager.removeAllAssignees(securityUtil.getItemBankUser(), request.getItemIds());
        return SUCCESS;
    }

    @Transactional(readOnly = true)
    public List<ItemBulkUpdate> findUserUpdates(String updateType) {
        log.debug("find updates of type {} for {}", updateType, securityUtil.getUsername());
        List<ItemBulkUpdateEntity> entities = ListUtils
            .emptyIfNull(this.entityMgr.findByUser(updateType, securityUtil.getUsername()));
        return entities.stream().map(ItemBulkUpdateEntity::getItemBulkUpdateJson).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public ItemBulkUpdate findLatest(String updateId) {
        log.debug("find latest item bulk update record for update {}, requesting user {}",
            updateId, securityUtil.getUsername());
        ItemBulkUpdateEntity entity = this.entityMgr.findLatest(updateId);
        return Objects.nonNull(entity) ? entity.getItemBulkUpdateJson() : null;
    }

    @Transactional
    public ItemBulkResponse updateItemWorkflowStatus(ItemBulkWorkflowStatusRequest request) {
        log.info("processing bulk item update workflow status request");

        this.validateWorkflowStatusRequest(request);

        this.itemManager.updateWorkflowStatus(
            securityUtil.getItemBankUser(),
            request.getWorkflowStatusCode(),
            request.isOverride(),
            request.getItemIds(),
            request.getMessage());

        return SUCCESS;
    }


    @Transactional
    public ItemBulkResponse updateItemAccessibility(ItemBulkAccessibilityRequest request) {
        log.info("processing bulk item update workflow status request");

        this.validateAccessibilityRequest(request);

        Object propertyValue = this.getPropertyValue(request.getPropertyType(), request.getPropertyValue());

        this.itemManager.patchItems(
            securityUtil.getItemBankUser(),
            request.getItemIds(),
            request.getSection(),
            request.getPropertyPath(),
            propertyValue,
            request.getMessage()
        );

        return SUCCESS;
    }

    @Transactional
    public ItemBulkResponse updateItemAssociation(ItemBulkAssociationRequest request) {
        log.info("processing bulk item association request");

        this.validateAssociationRequest(request);

        this.itemManager.updateAssociationId(
            securityUtil.getItemBankUser(),
            request.getAssociationId(),
            request.getAssociationType(),
            request.getItemIds(),
            request.getMessage()
        );

        return SUCCESS;
    }

    public ItemBulkResponse updateItemMetadata(ItemBulkMetadataRequest request) {
        log.info("processing bulk item metadata request");
        this.validateMetadataRequest(request);

        List<String> restrictionsList = ListUtils.emptyIfNull(request.getRestrictions());

        String[] restrictions = restrictionsList.toArray(new String[restrictionsList.size()]);

        Object propertyValue = this.getPropertyValue(request.getPropertyType(), request.getPropertyValue());

        this.itemManager.patchItems(
            securityUtil.getItemBankUser(),
            request.getItemIds(),
            SECTION_METADATA,
            request.getPropertyPath(),
            propertyValue,
            request.getMessage(),
            restrictions
        );
        return SUCCESS;
    }

    // ------------------------------------------------------------------------

    private ItemBulkUpdate processReceived(ItemBulkUpdateRequest request, String startedBy) {
        log.info("processReceived");
        String updateId = seqMgr.nextItemBulkUpdateSequence().toString();

        String updateType = request.getUpdateType();
        MultipartFile file = request.getFile();

        ItemBulkUpdate ibu = factory.newModel(updateId, updateType);
        ibu.timestamp();

        ibu.setUpdateMessage("Storing zip file");
        ibu.setUpdateStatus(IBU_STATUS_RECEIVED);
        ibu.setUpdateOwner(startedBy);
        ibu.setUpdateStartDate(Date.from(Instant.now()));

        ibu.setUploadFileName(file.getOriginalFilename());
        ibu.setUploadFileSize(String.valueOf(file.getSize()));

        this.save(ibu);

        return ibu;
    }

    private ItemBulkUpdate processPending(ItemBulkUpdate ibu) {
        log.info("processPending");

        ItemBulkUpdate ibuClone = this.utility.cloneModel(ibu);
        ibuClone.timestamp();
        ibuClone.setUpdateMessage("Pending");
        ibuClone.setUpdateStatus(IBU_STATUS_PENDING);
        ibuClone.setUploadCompleteDate(Date.from(Instant.now()));
        ibuClone.setUploadDuration(Long.toString(
            ibuClone.getUploadCompleteDate().getTime() - ibuClone.getUpdateStartDate().getTime()));

        ItemBulkUpdateEntity entity = this.save(ibuClone);

        this.eventProducer.sendPendingRequestEvent(entity);

        return ibuClone;
    }

    private ItemBulkUpdateEntity save(ItemBulkUpdate model) {
        ItemBulkUpdateEntity entity = new ItemBulkUpdateEntity();
        entity.setItemBulkUpdateId(model.getUpdateId());
        entity.setUpdateType(model.getUpdateType());
        entity.setItemBulkUpdateJson(model);
        entity.setCreatedBy(model.getUpdateOwner());
        entity.setUpdatedBy(systemUsername());

        ItemBulkUpdateEntity persistedEntity = entityMgr.save(entity);
        log.info("Item bulk update record inserted {} ", persistedEntity.getId());

        return persistedEntity;
    }

    private String systemUsername() {
        return itemBankProperties.getSystemUser().getUserName();
    }

    // ------------------------------------------------------------------------
    // Validation
    // ------------------------------------------------------------------------

    private void validateBulkAssignmentRequest(ItemBulkAssignmentRequest request) throws ItemBulkUpdateCheckedException {
        this.validateItemIds(request.getItemIds());
        if (isEmpty(request.getUserNames())) {
            throw new ItemBulkUpdateCheckedException("Request contains no user names");
        }
    }

    private void validateBulkRemovalRequest(ItemBulkAssignmentRequest request) throws ItemBulkUpdateCheckedException {
        this.validateItemIds(request.getItemIds());
    }

    private void validateWorkflowStatusRequest(ItemBulkWorkflowStatusRequest request) {
        this.validateItemIds(request.getItemIds());
        this.validateComment(request.getMessage());
        if (isBlank(request.getWorkflowStatusCode())) {
            throw new ValidationException("Request contains no workflow status");
        }
    }

    private void validateAccessibilityRequest(ItemBulkAccessibilityRequest request) {
        this.validateItemIds(request.getItemIds());
        this.validateComment(request.getMessage());
        if (isBlank(request.getSection())) {
            throw new ValidationException("Request must contain section");
        }
        if (isBlank(request.getPropertyType())) {
            throw new ValidationException("Request must contain property type");
        }
        if (isBlank(request.getPropertyPath())) {
            throw new ValidationException("Request must contain property path");
        }
        if (isBlank(request.getPropertyValue())) {
            throw new ValidationException("Request must contain property value");
        }
    }

    private void validateAssociationRequest(ItemBulkAssociationRequest request) {
        this.validateItemIds(request.getItemIds());
        this.validateComment(request.getMessage());
        if (!ASSOCIATION_TYPE_TUTORIAL.equalsIgnoreCase(request.getAssociationType())) {
            throw new ValidationException("Request must have association type 'tutorial'");
        }
    }

    private void validateMetadataRequest(ItemBulkMetadataRequest request) {
        this.validateItemIds(request.getItemIds());
        this.validateComment(request.getMessage());
        if (isBlank(request.getPropertyType())) {
            throw new ValidationException("Request must contain property type");
        }
        if (isBlank(request.getPropertyPath())) {
            throw new ValidationException("Request must contain property path");
        }
        if (Objects.isNull(request.getPropertyValue())) {
            throw new ValidationException("Request must contain property value");
        }
    }

    private void validateItemIds(List<String> itemIds) {
        if (isEmpty(itemIds)) {
            throw new ValidationException("Request contains no item ids");
        }
    }

    private void validateComment(String comment) {
        if (isBlank(comment)) {
            throw new ValidationException("Request must contain a comment");
        }
    }

    private Object getPropertyValue(String type, String value) {
        return PROPERTY_TYPE_BOOLEAN.equalsIgnoreCase(type) ? Boolean.valueOf(value) : value;
    }
}
