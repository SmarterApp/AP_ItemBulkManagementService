/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ibms;

import org.opentestsystem.ap.common.bulkupdate.BulkUpdateService;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateEventProducer;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateFactory;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateFileManager;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateItemManager;
import org.opentestsystem.ap.common.bulkupdate.ItemBulkUpdateUtility;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminProcessor;
import org.opentestsystem.ap.common.bulkupdate.testadmin.TestAdminUtil;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.attachment.mapper.ItemAttachmentMapper;
import org.opentestsystem.ap.common.datastore.client.S3BucketManager;
import org.opentestsystem.ap.common.datastore.repository.ItemBulkUpdateEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemHistoryRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemSyncRepository;
import org.opentestsystem.ap.common.datastore.repository.SavedSearchRepository;
import org.opentestsystem.ap.common.datastore.repository.SequenceRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.itembank.IdGenerator;
import org.opentestsystem.ap.common.util.RandomIdGenerator;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.cache.CacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheManager;

import static org.mockito.Mockito.mock;

/**
 * No ItemBank configuration means we are running under a context where we do not have what is need to connect to an
 * actual Gitlab instance. This configuration replaces the runtime configuration
 */
@Configuration
@ConditionalOnProperty(value = "itembank.test.enabled", havingValue = "true")
public class AppTestConfig {

    private final ItemBankProperties itemBankProperties;

    public AppTestConfig(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    // ------------------------------------------------------------------------

    @Bean
    public IdGenerator itemIdGenerator() {
        return new RandomIdGenerator(itemBankProperties.getIdMinValue(), itemBankProperties.getIdMaxValue());
    }

    @Bean
    public TestAdminUtil testAdminUtil() {
        return new TestAdminUtil();
    }

    @Bean
    public TestAdminProcessor testAdminProcessor() {
        return mock(TestAdminProcessor.class);
    }

    @Bean
    public BulkUpdateService bulkUpdateService() {
        return mock(BulkUpdateService.class);
    }

    @Bean
    public ItemBulkUpdateItemManager itemBulkUpdateItemManager() { return mock(ItemBulkUpdateItemManager.class);}

    // ------------------------------------------------------------------------

    @Bean
    public CacheManager cacheManager() {
        return mock(RedisCacheManager.class);
    }

    @Bean
    public RabbitAdmin rabbitAdmin() {
        return mock(RabbitAdmin.class);
    }

    @Bean
    public RabbitTemplate rabbitTemplate() {
        return mock(RabbitTemplate.class);
    }

    // ------------------------------------------------------------------------

    @Bean
    public SequenceRepository sequenceRepository() {
        return mock(SequenceRepository.class);
    }

    @Bean
    public ItemBulkUpdateEntityRepository itemBulkUpdateEntityRepository() {
        return mock(ItemBulkUpdateEntityRepository.class);
    }

    @Bean
    public ItemBulkUpdateFactory itemBulkUpdateFactory() {
        return mock(ItemBulkUpdateFactory.class);
    }

    @Bean
    public ItemBulkUpdateFileManager itemBulkUpdateFileManager() {
        return mock(ItemBulkUpdateFileManager.class);
    }

    @Bean
    public ItemBulkUpdateUtility itemBulkUpdateUtility() {
        return mock(ItemBulkUpdateUtility.class);
    }

    @Bean
    public ItemBulkUpdateEventProducer ItemBulkUpdateEventProducer() {
        return mock(ItemBulkUpdateEventProducer.class);
    }

    @Bean
    public S3BucketManager s3BucketManager() {
        return mock(S3BucketManager.class);
    }

    @Bean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    public DataStoreAttachmentManager dataStoreAttachmentManager() {
        return mock(DataStoreAttachmentManager.class);
    }

    @Bean
    public DataStoreDataManager dataStoreDataManager() {
        return mock(DataStoreDataManager.class);
    }

    // ------------------------------------------------------------------------

    @Bean
    public WorkflowStatusRepository workflowStatusRepository() {
        return mock(WorkflowStatusRepository.class);
    }

    @Bean
    public ItemEntityRepository itemEntityRepository() {
        return mock(ItemEntityRepository.class);
    }

    @Bean
    public SavedSearchRepository savedSearchRepository() {
        return mock(SavedSearchRepository.class);
    }

    @Bean
    public WorkflowStatusTransitionRepository workflowStatusTransitionRepository() {
        return mock(WorkflowStatusTransitionRepository.class);
    }

    @Bean
    public ItemSyncRepository itemSyncRepository() {
        return mock(ItemSyncRepository.class);
    }

    @Bean
    public ItemHistoryRepository itemHistoryRepository() {
        return mock(ItemHistoryRepository.class);
    }

    @Bean
    public ItemAttachmentMapper itemAttachmentMapper() {
        return mock(ItemAttachmentMapper.class);
    }
}
